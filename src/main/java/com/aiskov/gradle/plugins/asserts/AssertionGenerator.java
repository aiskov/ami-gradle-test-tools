package com.aiskov.gradle.plugins.asserts;

import com.aiskov.gradle.plugins.asserts.creators.AssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.BooleanAssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.CollectionAssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.CommonAssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.ComparableAssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.NullableAssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.RecursionAssertionCreator;
import com.aiskov.gradle.plugins.asserts.creators.StringAssertionCreator;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import lombok.SneakyThrows;
import org.assertj.core.api.AbstractObjectAssert;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Stream;

import static com.aiskov.gradle.plugins.common.ReflectionUtils.getGenericParamsOfReturnType;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;

public class AssertionGenerator {
    private static final List<AssertionCreator> CREATORS = List.of(
            new CommonAssertionCreator(), new NullableAssertionCreator(), new BooleanAssertionCreator(),
            new StringAssertionCreator(), new ComparableAssertionCreator(), new RecursionAssertionCreator(),
            new CollectionAssertionCreator()
    );

    @SneakyThrows
    public static void generateAssertionClass(Class<?> dtoClass, String outputDirectory, List<? extends Class<?>> otherClasses) {
        String packageName = dtoClass.getPackageName();
        String className = dtoClass.getSimpleName() + "Assert";

        ClassName selfClass = ClassName.get(packageName, className);

        TypeSpec.Builder classBuilder = TypeSpec.classBuilder(className)
                .addModifiers(PUBLIC)
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
                        .addMember("value", "{\"unused\", \"ConstantValue\"}")
                        .build())
                .superclass(ParameterizedTypeName.get(
                        ClassName.get(AbstractObjectAssert.class),
                        ClassName.get(packageName, className),
                        ClassName.get(dtoClass)
                ))
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(ClassName.get(packageName, dtoClass.getSimpleName()), "actual").build())
                        .addModifiers(PUBLIC)
                        .addStatement("super(actual, $T.class)", selfClass)
                        .build())
                .addMethod(MethodSpec.methodBuilder("assertThat")
                        .addModifiers(PUBLIC, STATIC)
                        .returns(ClassName.get(packageName, className))
                        .addParameter(ClassName.get(packageName, dtoClass.getSimpleName()), "actual")
                        .addStatement("return new $T(actual)", ClassName.get(packageName, className))
                        .build());

        List<MethodSpec> fieldAssertionMethods = generateFieldAssertionMethods(selfClass, dtoClass, otherClasses);
        classBuilder.addMethods(fieldAssertionMethods);

        JavaFile javaFile = JavaFile.builder(packageName, classBuilder.build())
                .addFileComment("This code is generated by the AssertionGenerator. Do not modify it manually.")
                .addFileComment("CHECKSTYLE:OFF")
                .build();

        Path dir = Path.of(outputDirectory, javaFile.packageName.replace(".", "/"));
        Files.createDirectories(dir);

        javaFile.writeTo(Path.of(outputDirectory));
    }

    private static List<MethodSpec> generateFieldAssertionMethods(ClassName selfClass, Class<?> dtoClass, List<? extends Class<?>> otherClasses) {

        AssertionContext context = AssertionContext.of(ClassName.get(dtoClass), selfClass, otherClasses);

        return Stream.of(dtoClass.getMethods())
                .filter(method -> method.getName().startsWith("get") && method.getParameterCount() == 0 && ! method.getName().equals("getClass"))
                .map(method -> context.field(method.getName().substring(3), method.getReturnType(), getGenericParamsOfReturnType(method)))
                .filter(AssertionContext.AssertionFieldContext::isAlreadyProcessed)
                .flatMap(fieldContext -> CREATORS.stream().flatMap(creators -> creators.createIfApplicable(fieldContext).stream()))
                .toList();
    }
}
