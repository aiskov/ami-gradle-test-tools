package com.aiskov.gradle.plugins.fixtures;

import com.aiskov.gradle.plugins.fixtures.providers.BooleanProvider;
import com.aiskov.gradle.plugins.fixtures.providers.CollectionProvider;
import com.aiskov.gradle.plugins.fixtures.providers.NumberIdProvider;
import com.aiskov.gradle.plugins.fixtures.providers.RandomNumberProvider;
import com.aiskov.gradle.plugins.fixtures.providers.RandomStringProvider;
import com.aiskov.gradle.plugins.fixtures.providers.RecursionProvider;
import com.aiskov.gradle.plugins.fixtures.providers.StringFromExampleProvider;
import com.aiskov.gradle.plugins.fixtures.providers.StringIdProvider;
import com.aiskov.gradle.plugins.fixtures.providers.StringUnixIdProvider;
import com.aiskov.gradle.plugins.fixtures.providers.ValueProvider;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import lombok.SneakyThrows;

import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Stream;

import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;

public class FixturesGenerator {
    private static final List<ValueProvider> VALUE_PROVIDERS = List.of(new StringUnixIdProvider(), new StringIdProvider(),
            new StringFromExampleProvider(), new NumberIdProvider(), new RandomNumberProvider(), new CollectionProvider(),
            new RandomStringProvider(), new BooleanProvider(), new RecursionProvider());

    @SneakyThrows
    public static void generateFixtureClass(Class<?> dtoClass,
                                            String outputDirectory,
                                            List<Class<?>> allClasses,
                                            Map<String, String> valueProviderSnippets) {

        String packageName = dtoClass.getPackageName();
        String className = dtoClass.getSimpleName() + "Fixtures";

        TypeSpec.Builder classBuilder = TypeSpec.classBuilder(className)
                .addModifiers(PUBLIC)
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
                        .addMember("value", "{\"unused\"}")
                        .build());

        addBuiltInProviders(classBuilder);

        List<MethodSpec> fieldAssertionMethods = generateFixture(dtoClass, allClasses, valueProviderSnippets);
        classBuilder.addMethods(fieldAssertionMethods);

        JavaFile javaFile = JavaFile.builder(packageName, classBuilder.build())
                .addFileComment("This code is generated by the $L. Do not modify it manually.\n" +
                        "CHECKSTYLE:OFF", FixturesGenerator.class.getCanonicalName())
                .build();

        Path dir = Path.of(outputDirectory, javaFile.packageName.replace(".", "/"));
        Files.createDirectories(dir);

        javaFile.writeTo(Path.of(outputDirectory));
    }

    private static void addBuiltInProviders(TypeSpec.Builder classBuilder) {
        classBuilder.addField(FieldSpec.builder(ClassName.get(AtomicLong.class), "COUNTER", PRIVATE, STATIC, FINAL)
                .initializer("new AtomicLong(0L)").build());

        classBuilder.addField(FieldSpec.builder(ParameterizedTypeName.get(ClassName.get(List.class), ClassName.get(String.class)), "USER_IDS", PRIVATE, STATIC, FINAL)
                .initializer("List.of(\"diazh\", \"thomasd\", \"watsonr\", \"taylore\", \n\"robertsa\", \"bryanth\", \"stewarth\", " +
                        "\"kellyh\", \"hughesb\", \"whitem\", \"davisj\", \"hendersonl\", \"perryp\", \"kingr\")").build());

        classBuilder.addField(FieldSpec.builder(ClassName.get(Random.class), "RANDOM", PRIVATE, STATIC, FINAL)
                .initializer("new Random()").build());
    }

    @SneakyThrows
    public static List<MethodSpec> generateFixture(Class<?> dtoClass, List<Class<?>> allClasses, Map<String, String> valueProviderSnippets) {
        List<MethodSpec> result = new LinkedList<>();

        // Create `builder` method
        ClassName targetType = ClassName.get(dtoClass);
        StringBuilder code = new StringBuilder("return $T.builder()\n");

        Stream.of(dtoClass.getDeclaredFields()).forEach(field -> {
            String value = getValueProviderCode(field, allClasses, valueProviderSnippets, dtoClass);
            if (value != null) {
                code.append((".%s(%s)\n").formatted(field.getName(), value));
            }
        });

        Class<?> builderType = dtoClass.getMethod("builder").getReturnType();

        String builderMethodName = "builder%s".formatted(dtoClass.getSimpleName());
        result.add(MethodSpec.methodBuilder(builderMethodName)
                .addModifiers(PUBLIC, STATIC)
                .returns(ClassName.get(builderType))
                .addStatement(code.toString(), targetType)
                .build());

        // Create `create` method
        result.add(MethodSpec.methodBuilder("create%s".formatted(dtoClass.getSimpleName()))
                .addModifiers(PUBLIC, STATIC)
                .returns(targetType)
                .addStatement("return $L().build()", builderMethodName)
                .build());

        return result;
    }

    private static String getValueProviderCode(Field field,
                                               List<Class<?>> allClasses,
                                               Map<String, String> valueProviderSnippets,
                                               Class<?> ownerType) {

        FieldContext fieldContext = FieldContext.of(field, allClasses);

        String definitionFromConfig = valueProviderSnippets.get(ownerType.getCanonicalName() + "." + field.getName());
        if (definitionFromConfig == null) definitionFromConfig = valueProviderSnippets.get(ownerType.getSimpleName() + "." + field.getName());
        if (definitionFromConfig == null) definitionFromConfig = valueProviderSnippets.get(field.getName());

        if (definitionFromConfig != null) return definitionFromConfig;

        for (ValueProvider provider : VALUE_PROVIDERS) {
            if (provider.isApplicable(fieldContext)) {
                String providerCode = provider.getProviderCode(fieldContext);
                if (providerCode != null) {
                    return providerCode;
                }
            }
        }

        return null;
    }
}
